global:
  storageClass: "openebs-hostpath"
fullnameOverride: "spark"
image:
  registry: registry.lingo.local
  repository: service/bitnami-spark
  tag: 3.5.0
  pullPolicy: IfNotPresent
  debug: false
hostNetwork: false
master:
  existingConfigmap: ""
  containerPorts:
    http: 8080
    https: 8480
    cluster: 7077
  hostAliases: []
  extraContainerPorts: []
  daemonMemoryLimit: ""
  configOptions: ""
  extraEnvVars:
    - name: TZ
      value: Asia/Shanghai
  resources:
    limits: {}
    requests: {}
  affinity: {}
  nodeSelector: {}
worker:
  existingConfigmap: ""
  containerPorts:
    http: 8080
    https: 8480
    cluster: ""
  hostAliases: []
  extraContainerPorts: []
  daemonMemoryLimit: ""
  memoryLimit: ""
  coreLimit: ""
  dir: ""
  javaOptions: ""
  configOptions: ""
  replicaCount: 2
  extraEnvVars:
    - name: TZ
      value: Asia/Shanghai
  resources:
    limits: {}
    requests: {}
  # resources:
  #   limits:
  #     cpu: "1"
  #     memory: "1Gi"
  #   requests:
  #     cpu: "500m"
  #     memory: "512Mi"
  # ## Allowed values: `soft` or `hard`
  # #podAffinityPreset: "soft"  ## 调度到同一节点
  # podAntiAffinityPreset: "hard"  ## 调度到不同节点
  # nodeAffinityPreset:  ## 调度到包含指定标签的节点，例如创建节点标签：kubectl label node server02.lingo.local ateng.kafka.controller=node
  #   type: "hard"
  #   key: "ateng.kafka.controller"
  #   values:
  #     - node
  # affinity: {}
  # nodeSelector: {}
  # terminationGracePeriodSeconds: "30"
security:
  passwordsSecretName: ""
  rpc:
    authenticationEnabled: false
    encryptionEnabled: false
  storageEncryptionEnabled: false
  certificatesSecretName: ""
  ssl:
    enabled: false
    needClientAuth: false
    protocol: TLSv1.2
    existingSecret: ""
    autoGenerated: false
    keystorePassword: ""
    truststorePassword: ""
    resources:
      limits: {}
      requests: {}
service:
  type: NodePort
  ports:
    http: 80
    https: 443
    cluster: 7077
  nodePorts:
    http: ""
    https: ""
    cluster: ""
serviceAccount:
  create: true
  name: ""
  annotations: {}
  automountServiceAccountToken: true
metrics:
  enabled: false
  masterAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: '/metrics/'
    prometheus.io/port: '{{ .Values.master.containerPorts.http }}'
  workerAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: '/metrics/'
    prometheus.io/port: '{{ .Values.worker.containerPorts.http }}'
  podMonitor:
    enabled: false
    extraMetricsEndpoints: []
    namespace: ""
    interval: 30s
    scrapeTimeout: ""
    additionalLabels: {}
  prometheusRule:
    enabled: false
    additionalLabels: {}
    rules: []
