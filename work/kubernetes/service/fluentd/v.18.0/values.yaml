global:
  defaultStorageClass: ""
  security:
    allowInsecureImages: true
fullnameOverride: "fluentd"
image:
  registry: registry.lingo.local
  repository: bitnami/fluentd
  tag: "1.18.0"
  pullPolicy: IfNotPresent
forwarder:
  enabled: true
  daemonUser: root
  daemonGroup: root
  terminationGracePeriodSeconds: 30
  extraGems: []
  configFile: fluentd.conf
  configMap: ""
  configMapFiles:
    fluentd.conf: |
      # Ignore fluentd own events
      <match fluent.**>
        @type null
      </match>

      @include fluentd-inputs.conf
      @include fluentd-output.conf
      {{- if .Values.metrics.enabled }}
      @include metrics.conf
      {{- end }}
    fluentd-inputs.conf: |
      # HTTP input for the liveness and readiness probes
      <source>
        @type http
        port 9880
      </source>
      # Get the logs from the containers running in the node
      <source>
        @type tail
        path /var/log/containers/*.log
        # exclude Fluentd logs
        exclude_path /var/log/containers/*fluentd*.log
        pos_file /opt/bitnami/fluentd/logs/buffers/fluentd-docker.pos
        tag kubernetes.*
        read_from_head true
        <parse>
          @type json
          time_key time
          time_format %Y-%m-%dT%H:%M:%S.%NZ
        </parse>
      </source>
      # enrich with kubernetes metadata
      {{- if or .Values.forwarder.serviceAccount.create .Values.forwarder.serviceAccount.name }}
      <filter kubernetes.**>
        @type kubernetes_metadata
      </filter>
      {{- end }}
    fluentd-output.conf: |
      # Throw the healthcheck to the standard output instead of forwarding it
      <match fluentd.healthcheck>
        @type stdout
      </match>
      {{- if .Values.aggregator.enabled }}
      # Forward all logs to the aggregators
      <match **>
        @type forward
        {{- if .Values.tls.enabled }}
        transport tls
        tls_cert_path /opt/bitnami/fluentd/certs/out_forward/ca.crt
        tls_client_cert_path /opt/bitnami/fluentd/certs/out_forward/tls.crt
        tls_client_private_key_path /opt/bitnami/fluentd/certs/out_forward/tls.key
        {{- end }}

        {{- $fullName := (include "common.names.fullname" .) }}
        {{- $global := . }}
        {{- $domain := default "cluster.local" .Values.clusterDomain }}
        {{- $port := .Values.aggregator.port | int }}
        {{- range $i, $e := until (.Values.aggregator.replicaCount | int) }}
        <server>
          {{ printf "host %s-%d.%s-headless.%s.svc.%s" $fullName $i $fullName $global.Release.Namespace $domain }}
          {{ printf "port %d" $port }}
          {{- if ne $i 0 }}
          standby
          {{- end }}
        </server>
        {{- end }}
        <buffer>
          @type file
          path /opt/bitnami/fluentd/logs/buffers/logs.buffer
          flush_thread_count 2
          flush_interval 5s
        </buffer>
      </match>
      {{- else }}
      # Send the logs to the standard output
      <match **>
        @type stdout
      </match>
      {{- end }}
    metrics.conf: |
      # Prometheus Exporter Plugin
      # input plugin that exports metrics
      <source>
        @type prometheus
        port {{ .Values.metrics.service.port }}
      </source>
      # input plugin that collects metrics from MonitorAgent
      <source>
        @type prometheus_monitor
        <labels>
          host ${hostname}
        </labels>
      </source>
      # input plugin that collects metrics for output plugin
      <source>
        @type prometheus_output_monitor
        <labels>
          host ${hostname}
        </labels>
      </source>
      # input plugin that collects metrics for in_tail plugin
      <source>
        @type prometheus_tail_monitor
        <labels>
          host ${hostname}
        </labels>
      </source>

  extraArgs: ""
  service:
    type: ClusterIP
    ports:
      ## syslog-udp:
      ##   port: 5140
      ##   targetPort: syslog-udp
      ##   protocol: UDP
      ##   nodePort: 31514
      ## syslog-tcp:
      ##   port: 5140
      ##   targetPort: syslog-tcp
      ##   protocol: TCP
      ##   nodePort: 31514
      ## tcp:
      ##   port: 24224
      ##   targetPort: tcp
      ##   protocol: TCP
      http:
        port: 9880
        targetPort: http
        protocol: TCP
  resourcesPreset: "none"
  resources: {}
  affinity: {}
  nodeSelector: {}
  # resources:
  #   limits:
  #     cpu: "1"
  #     memory: "1Gi"
  #   requests:
  #     cpu: "500m"
  #     memory: "512Mi"
  # ## Allowed values: `soft` or `hard`
  # #podAffinityPreset: "soft"  ## 调度到同一节点
  podAntiAffinityPreset: "soft"  ## 调度到不同节点
  nodeAffinityPreset:  ## 调度到包含指定标签的节点，例如创建节点标签：kubectl label node server02.lingo.local kubernetes.service/fluentd="true"
    type: "soft"
    key: "kubernetes.service/fluentd"
    values:
      - "true"
  extraEnvVars:
    - name: TZ
      value: Asia/Shanghai
aggregator:
  enabled: true
  replicaCount: 1
  terminationGracePeriodSeconds: 30
  extraGems: []
  configFile: fluentd.conf
  configMap: ""
  configMapFiles:
    fluentd.conf: |
      # Ignore fluentd own events
      <match fluent.**>
        @type null
      </match>

      @include fluentd-inputs.conf
      @include fluentd-output.conf
      {{- if .Values.metrics.enabled }}
      @include metrics.conf
      {{- end }}
    fluentd-inputs.conf: |
      # TCP input to receive logs from
      {{- if .Values.aggregator.port }}
      <source>
        @type forward
        bind 0.0.0.0
        port {{ .Values.aggregator.port }}
        {{- if .Values.tls.enabled }}
        <transport tls>
          ca_path /opt/bitnami/fluentd/certs/in_forward/ca.crt
          cert_path /opt/bitnami/fluentd/certs/in_forward/tls.crt
          private_key_path /opt/bitnami/fluentd/certs/in_forward/tls.key
          client_cert_auth true
        </transport>
        {{- end }}
      </source>
      {{- end }}

      # HTTP input for the liveness and readiness probes
      <source>
        @type http
        bind 0.0.0.0
        port 9880
      </source>
    fluentd-output.conf: |
      # Throw the healthcheck to the standard output
      <match fluentd.healthcheck>
        @type stdout
      </match>

      # Send the logs to the standard output
      <match **>
        @type stdout
      </match>
    metrics.conf: |
      # Prometheus Exporter Plugin
      # input plugin that exports metrics
      <source>
        @type prometheus
        port {{ .Values.metrics.service.port }}
      </source>

      # input plugin that collects metrics from MonitorAgent
      <source>
        @type prometheus_monitor
        <labels>
          host ${hostname}
        </labels>
      </source>

      # input plugin that collects metrics for output plugin
      <source>
        @type prometheus_output_monitor
        <labels>
          host ${hostname}
        </labels>
      </source>
  port: 24224
  extraArgs: ""
  resourcesPreset: "none"
  resources: {}
  affinity: {}
  nodeSelector: {}
  # resources:
  #   limits:
  #     cpu: "1"
  #     memory: "1Gi"
  #   requests:
  #     cpu: "500m"
  #     memory: "512Mi"
  # ## Allowed values: `soft` or `hard`
  # #podAffinityPreset: "soft"  ## 调度到同一节点
  podAntiAffinityPreset: "soft"  ## 调度到不同节点
  nodeAffinityPreset:  ## 调度到包含指定标签的节点，例如创建节点标签：kubectl label node server02.lingo.local kubernetes.service/fluentd="true"
    type: "soft"
    key: "kubernetes.service/fluentd"
    values:
      - "true"
  extraEnvVars:
    - name: TZ
      value: Asia/Shanghai
  containerPorts:
    # - name: my-port
    #   containerPort: 24222
    #   protocol: TCP
    - name: http
      containerPort: 9880
      protocol: TCP
  service:
    type: ClusterIP
    ports:
      http:
        port: 9880
        targetPort: http
        protocol: TCP
      tcp:
        port: 24224
        targetPort: tcp
        protocol: TCP
  persistence:
    enabled: false
    size: 10Gi
